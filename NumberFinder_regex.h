
#ifndef NUMBER_FINDER_REGEX_H
#define NUMBER_FINDER_REGEX_H

#include <iostream>
#include <regex>
#include <fstream>
#include <string>
#include <iomanip>
#include <sstream>
#include <cmath>
#include <chrono>

// Оголошення функцій

std::string punkt_number(std::string num);
/**
 * @brief Форматує число з десятковою крапкою у вигляді "0.0000".
 *
 * Перетворює рядок з числом `num` на число з плаваючою точкою, а потім форматує
 * його з точністю до 4 знаків після коми, використовуючи `std::ostringstream`.
 *
 * @param num Рядок, що містить число з десятковою крапкою.
 * @return Відформатоване число у вигляді рядка з точністю до 4 знаків після коми.
 */

std::string comma_number(std::string num);
/**
 * @brief Замінює кому на крапку в числі та форматує його до вигляду "0.0000".
 *
 * Знаходить і замінює кому в числі `num` на крапку, після чого перетворює рядок
 * на число з плаваючою точкою і форматує його з точністю до 4 знаків.
 *
 * @param num Рядок, що містить число з комою.
 * @return Відформатоване число з крапкою у вигляді рядка з точністю до 4 знаків після коми.
 */

std::string e_number(std::string num);
/**
 * @brief Обробляє число у форматі з експоненціальною позначкою ("e" або "E") та форматує його у вигляді "0.0000".
 *
 * Замінює "E" на "e" для однорідності, розбиває число на основну та експоненційну частини, перетворює їх,
 * а потім обчислює значення, форматуючи з точністю до 4 знаків після коми.
 *
 * @param num Рядок, що містить число з експоненціальною позначкою.
 * @return Відформатоване число у вигляді рядка з точністю до 4 знаків після коми.
 */

std::string number_unificator(const std::string& number);
/**
 * @brief Уніфікує формат числа, щоб привести його до виду "0.0000".
 *
 * Перевіряє тип числа (десяткове, з комою або експоненціальне) і викликає відповідну
 * функцію для форматування. Якщо число ціле, додає ".0000" до нього.
 *
 * @param number Рядок, що містить число.
 * @return Відформатоване число у вигляді рядка з точністю до 4 знаків після коми.
 */

bool is_part_of_date_time(const std::string& line, size_t match_pos, size_t match_length);
/**
 * @brief Перевіряє, чи є число частиною дати або часу у форматі з роздільниками "/".
 *
 * Аналізує символи перед та після числа, щоб визначити, чи це число належить до формату дати
 * або часу (з роздільниками "/" або ":").
 *
 * @param line Рядок, що містить число.
 * @param match_pos Позиція числа у рядку.
 * @param match_length Довжина числа у рядку.
 * @return Повертає true, якщо число є частиною дати або часу; інакше false.
 */

std::string number_finder(const std::string& line);
/**
 * @brief Знаходить всі числа у рядку, уніфікує їх до формату "0.0000", крім випадків, коли число є частиною дати чи часу.
 *
 * Використовує регулярний вираз для пошуку чисел у рядку, включаючи варіанти з десятковою крапкою, комою або експоненціальною позначкою.
 * Кожне знайдене число перевіряється, щоб визначити, чи є воно частиною дати або часу. Якщо ні, число форматується
 * до вигляду "0.0000" та замінюється у вихідному рядку.
 *
 * @param line Рядок для обробки чисел.
 * @return Рядок з уніфікованими числами.
 */

void printer(std::ifstream& inputFile);
/**
 * @brief Зчитує кожен рядок із файлу та викликає функцію `number_finder` для форматування чисел у рядку.
 *
 * Читає файл рядок за рядком, передаючи кожен рядок у функцію `number_finder`,
 * щоб знайти і форматувати числа у формат "0.0000". Виводить результат обробки на екран.
 *
 * @param inputFile Вхідний файл для обробки.
 */

void file_opener(const std::string& textfile);
/**
 * @brief Відкриває текстовий файл для читання та передає його у функцію `printer` для обробки.
 *
 * Відкриває файл із вказаною назвою або шляхом. Якщо файл відкрито успішно, передає його функції
 * `printer` для пострічкової обробки. У разі невдачі виводить повідомлення про помилку.
 *
 * @param textfile Назва або шлях до файлу для обробки.
 */

#endif // NUMBERFORMATTER_H
