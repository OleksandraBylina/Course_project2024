#ifndef DATE_FINDER2_STRING_H_H
#define DATE_FINDER2_STRING_H_H
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

/**
 * @brief Масив назв місяців англійською.
 *
 * Цей масив містить назви місяців від "January" до "December".
 * Використовується для перетворення числового значення місяця на його текстове представлення.
 */
extern const char* months[];

/**
 * @brief Перетворює номер місяця у назву місяця англійською.
 *
 * Функція приймає рядок, що містить номер місяця у вигляді числового значення (наприклад, "01").
 * Повертає відповідну назву місяця з масиву `months`, якщо номер коректний (1-12).
 * У разі некоректного номера повертає порожній рядок.
 *
 * @param month_str Рядок із номером місяця (наприклад, "01" для січня).
 * @return Рядок із назвою місяця або порожній рядок у разі некоректного номера.
 */
const char* month_to_name(const char* month_str);

/**
 * @brief Перевіряє, чи є символ роздільником ('/' або '.').
 *
 * Символ розглядається як роздільник, якщо він дорівнює '/' або '.'.
 * Використовується для розпізнавання форматів дат у рядках.
 *
 * @param c Символ для перевірки.
 * @return 1, якщо символ є роздільником, і 0 в іншому випадку.
 */
int is_separator(char c);

/**
 * @brief Перевіряє, чи є символ цифрою.
 *
 * Символ є цифрою, якщо його код ASCII знаходиться у діапазоні '0'-'9'.
 * Функція використовується для перевірки компонентів дати (день, місяць, рік).
 *
 * @param c Символ для перевірки.
 * @return 1, якщо символ є цифрою, і 0 в іншому випадку.
 */
int is_digit_char(char c);

/**
 * @brief Перетворює двозначний рік у чотиризначний.
 *
 * Приймає двозначний рік у вигляді рядка (наприклад, "23") і додає до нього префікс "20",
 * щоб сформувати чотиризначний рік (наприклад, "23" -> "2023"). Результат записується
 * у переданий вихідний буфер, гарантуючи завершення рядка символом '\0'.
 *
 * @param year_two_digits Рядок із двозначним роком.
 * @param year_full Вихідний рядок для повного року. Має містити щонайменше 5 символів.
 */
void convert_two_digit_year(const char* year_two_digits, char* year_full);

/**
 * @brief Знаходить дати у тексті та додає поточний час до знайдених дат.
 *
 * Функція аналізує рядок, шукаючи дати у таких форматах:
 * - YYYY/MM/DD або YYYY.MM.DD (10 символів);
 * - DD/MM/YYYY або DD.MM.YYYY (10 символів);
 * - DD/MM/YY або DD.MM.YY (8 символів).
 *
 * До кожної знайденої дати додається поточний час у форматі:
 * "DD Month YYYY HH:MM:SS", де:
 * - DD - день,
 * - Month - назва місяця,
 * - YYYY - рік,
 * - HH:MM:SS - час (години, хвилини, секунди).
 *
 * Усі знайдені дати перезаписуються у вихідний рядок. Якщо розмір буфера результату перевищено,
 * виводиться повідомлення про помилку.
 *
 * @param line Вхідний рядок для аналізу та обробки.
 * @param result Вихідний рядок із заміненими датами. Максимальна довжина - 2048 символів.
 */
void date_finder(const char* line, char* result);

/**
 * @brief Зчитує текст із файлу, замінює дати в рядках на формат із часом і виводить результат.
 *
 * Зчитує рядки з текстового файлу, кожен рядок передає у функцію `date_finder`
 * для обробки дат. Замінює знайдені дати на формат із поточним часом.
 * Результати виводяться у стандартний потік виводу (консоль).
 *
 * @param inputFile Вказівник на відкритий файл для читання.
 */
void printer(FILE* inputFile);

/**
 * @brief Відкриває текстовий файл для читання та обробляє його.
 *
 * Функція відкриває текстовий файл за переданим шляхом. Якщо файл успішно відкрито,
 * передає його вказівник у функцію `printer` для обробки рядків. У разі невдачі
 * виводить повідомлення про помилку.
 *
 * @param textfile Шлях до текстового файлу.
 */
void file_opener(const char* textfile);

#endif // DATE_TIME_PROCESSOR_H
