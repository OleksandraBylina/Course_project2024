
#ifndef NUMBER_FINDER_STRING_H_H
#define NUMBER_FINDER_STRING_H_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#include <time.h>

// Оголошення функцій

float string_to_float(const char* str);
/**
 * @brief Перетворює рядок на число з плаваючою крапкою.
 *
 * Використовує `atof` для перетворення рядка `str` на `float`.
 *
 * @param str Рядок, що містить число.
 * @return Число з крапкою, яке відповідає значенню рядка.
 */

void format_number(char* buffer, float number);
/**
 * @brief Форматує число з точністю до чотирьох знаків після коми.
 *
 * Використовує `sprintf` для збереження числа `number` у буфер `buffer`
 * з точністю до чотирьох знаків після коми.
 *
 * @param buffer Буфер для збереження відформатованого числа.
 * @param number Число у форматі "0.0000".
 */

void punkt_number(const char* num, char* buffer);
/**
 * @brief Обробляє число з десятковою крапкою.
 *
 * Використовує `string_to_float` для перетворення `num` на число з плаваючою крапкою,
 * а потім форматує його за допомогою `format_number`.
 *
 * @param num Рядок, що містить число з крапкою.
 * @param buffer Буфер для збереження відформатованого числа.
 */

void comma_number(const char* num, char* buffer);
/**
 * @brief Замінює кому на крапку в числі та форматує його.
 *
 * Копіює `num` у тимчасовий масив `temp`, замінює всі коми на крапки,
 * потім перетворює `temp` на число з плаваючою крапкою та форматує.
 *
 * @param num Рядок, що містить число з комою.
 * @param buffer Буфер для збереження відформатованого числа.
 */

void e_number(const char* num, char* buffer);
/**
 * @brief Обробляє число з експоненціальною позначкою.
 *
 * Копіює `num` у `temp`, замінює "E" на "e" для однорідності,
 * потім перетворює `temp` на число з плаваючою крапкою та форматує його.
 *
 * @param num Рядок, що містить число з експоненціальною позначкою.
 * @param buffer Буфер для збереження відформатованого числа.
 */

int is_surrounded_by_letters(const char* line, int start, int end);
/**
 * @brief Перевіряє, чи є число оточеним літерами.
 *
 * Функція перевіряє, чи знаходяться перед числом та після нього літери,
 * що вказує на те, що число може бути частиною слова.
 *
 * @param line Рядок, що містить число.
 * @param start Початкова позиція числа в рядку.
 * @param end Кінцева позиція числа в рядку.
 * @return Повертає 1, якщо число оточене літерами; інакше повертає 0.
 */

void skip_date(const char* line, int* i);
/**
 * @brief Пропускає частину рядка, якщо вона має формат дати.
 *
 * Пропускає символи, якщо вони є цифрами або роздільниками для дат (`/`, `.`),
 * що вказує на формат дати.
 *
 * @param line Рядок для обробки.
 * @param i Покажчик на поточну позицію в рядку, що буде збільшено.
 */

void skip_time(const char* line, int* i);
/**
 * @brief Пропускає частину рядка, якщо вона має формат часу.
 *
 * Пропускає символи, якщо вони є цифрами або роздільниками для часу (`:`),
 * що вказує на формат часу.
 *
 * @param line Рядок для обробки.
 * @param i Покажчик на поточну позицію в рядку, що буде збільшено.
 */

void number_finder(char* line);
/**
 * @brief Шукає числа в рядку та замінює їх на уніфіковані формати з точністю до чотирьох знаків після коми.
 *
 * Функція проходить через `line`, шукає числові значення з урахуванням різних форматів (десяткова крапка, кома, експоненційний формат).
 * Використовує допоміжні функції (`punkt_number`, `comma_number`, `e_number`) для уніфікації формату чисел.
 * Ігнорує дати та час, а також числа, що є частинами слів.
 *
 * @param line Рядок для обробки чисел.
 */

void file_opener(const char* textfile);
/**
 * @brief Відкриває текстовий файл, зчитує рядки та обробляє їх функцією `number_finder`.
 *
 * Відкриває файл для читання, зчитує його рядок за рядком і передає кожний рядок у `number_finder`.
 * Виводить повідомлення про помилку, якщо файл не вдалося відкрити.
 *
 * @param textfile Шлях до текстового файлу для обробки.
 */

#endif // NUMBERFORMATTER_H
