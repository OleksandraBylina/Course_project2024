#ifndef HYPERLINK_FINDER_STRING_H_H
#define HYPERLINK_FINDER_STRING_H_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <time.h>

#define MAX_LINE_LENGTH 1000

// Оголошення функцій

int* hyperlink_beginning_finder(const char* line, int* count);
/**
 * @brief Знаходить початкові позиції гіперпосилань у рядку.
 *
 * Функція шукає всі гіперпосилання в рядку `line`, що починаються з типових префіксів, таких як "https://", "http://", "www." і "ftp://".
 * Для кожного знайденого гіперпосилання зберігає позицію його початку у масиві `massive_of_indexes`, виділеному динамічно.
 * Функція повертає масив позицій початків гіперпосилань та зберігає кількість знайдених позицій у змінній `count`.
 *
 * - Використовує `strstr` для пошуку підрядків у рядку `line`.
 * - Початкова позиція кожного збігу обчислюється як різниця покажчиків (позиція початку збігу мінус початок рядка).
 * - Функція переміщується далі в рядку після кожного знайденого гіперпосилання, щоб продовжити пошук.
 *
 * @param line Рядок, у якому виконується пошук гіперпосилань.
 * @param count Вказівник на змінну для збереження кількості знайдених початкових позицій.
 * @return Масив із початковими індексами кожного гіперпосилання.
 */

int* hyperlink_ending_finder(const char* line, int* massive_of_beginnings, int count);
/**
 * @brief Знаходить кінцеві позиції гіперпосилань у рядку.
 *
 * Функція визначає кінцеву позицію кожного гіперпосилання, починаючи від його початкової позиції, яка зберігається в `massive_of_beginnings`.
 * Вважає, що кінець гіперпосилання визначається першим пробілом або кінцем рядка, якщо пробіл не знайдено.
 * Повертає масив індексів кінцевих позицій для кожного гіперпосилання.
 *
 * - Використовує `strchr` для пошуку пробілу, що вказує на кінець гіперпосилання.
 * - Якщо пробіл не знайдено, кінцеву позицію встановлює на останній символ рядка.
 *
 * @param line Рядок, у якому виконується пошук.
 * @param massive_of_beginnings Масив початкових позицій кожного гіперпосилання.
 * @param count Кількість початкових позицій гіперпосилань.
 * @return Масив із кінцевими індексами кожного гіперпосилання.
 */

int* end_of_word_finder(const char* line, int* count);
/**
 * @brief Знаходить кінцеві позиції слів, що передують гіперпосиланням у рядку.
 *
 * Функція визначає кінцеву позицію слова, що безпосередньо передує кожному гіперпосиланню.
 * Спочатку викликає `hyperlink_beginning_finder`, щоб отримати початкові позиції гіперпосилань, а потім перевіряє символи перед цими позиціями,
 * щоб знайти кінець слів, ігноруючи пробіли та розділові знаки (`,`, `;`, `:`, `.`).
 *
 * - Перевіряє символи зліва від гіперпосилання і зупиняється, коли знаходить перший символ, що не є пробілом чи розділовим знаком.
 * - Зберігає позицію цього символа як кінець слова, що передує гіперпосиланню.
 *
 * @param line Рядок, у якому виконується пошук.
 * @param count Вказівник на змінну для збереження кількості знайдених слів перед гіперпосиланнями.
 * @return Масив із кінцевими індексами слів перед кожним гіперпосиланням.
 */

int* begin_of_word_finder(const char* line, int* count);
/**
 * @brief Знаходить початкові позиції слів, що передують гіперпосиланням у рядку.
 *
 * Використовує масив кінцевих позицій слів, який повертає `end_of_word_finder`, і шукає зворотно в рядку,
 * щоб визначити початкову позицію кожного слова. Зупиняється при досягненні пробілу або розділового знака,
 * щоб визначити початок слова.
 *
 * - Ініціалізує `massive_of_word_beginnings` для зберігання індексів початкових позицій кожного слова перед гіперпосиланням.
 * - Зберігає позицію символа, що йде одразу після пробілу або розділового знака перед словом.
 *
 * @param line Рядок, у якому виконується пошук.
 * @param count Вказівник на змінну для збереження кількості знайдених слів перед гіперпосиланнями.
 * @return Масив із початковими індексами слів перед кожним гіперпосиланням.
 */

void printer(FILE* inputFile);
/**
 * @brief Зчитує рядки з файлу, знаходить гіперпосилання та слова перед ними, і виводить їх на екран.
 *
 * Читає кожен рядок із файлу `inputFile`, знаходить гіперпосилання і слова, що передують їм.
 * Використовує `begin_of_word_finder`, `hyperlink_beginning_finder` і `hyperlink_ending_finder`
 * для визначення початкових і кінцевих позицій кожного гіперпосилання і відповідного слова перед ним.
 * Виводить на екран гіперпосилання з його контекстом і звільняє пам'ять, виділену для динамічних масивів.
 *
 * @param inputFile Вказівник на файл для читання.
 */

void file_opener(const char* textfile);
/**
 * @brief Відкриває текстовий файл і викликає `printer` для обробки його вмісту.
 *
 * Відкриває файл у режимі читання за вказаним шляхом `textfile`. Якщо файл відкрито успішно,
 * передає його у функцію `printer` для обробки рядків. Якщо файл не вдалося відкрити,
 * виводить повідомлення про помилку у стандартний потік помилок.
 *
 * @param textfile Шлях до файлу для обробки.
 */

#endif // HYPERLINKFINDER_H
